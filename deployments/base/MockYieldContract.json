{
  "address": "0xbDd2aaC74c45AC669EB5248d1FbAcA5Ef6717cAE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prizePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldDeposited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collectYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prizePool",
          "type": "address"
        }
      ],
      "name": "setPrizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4795a2f4eef48ea09edad8372e07f0e7739e12cf356360c923e863c861f2d611",
  "receipt": {
    "to": null,
    "from": "0xaB0035b4d11c325A42582E779206eA9ef717c975",
    "contractAddress": "0xbDd2aaC74c45AC669EB5248d1FbAcA5Ef6717cAE",
    "transactionIndex": 147,
    "gasUsed": "798579",
    "logsBloom": "0x
    "blockHash": "0x5b9921762357bdf5b19bd19d9a2d94fe4d84311608a0af5e2e1c9aa417ceb140",
    "transactionHash": "0x4795a2f4eef48ea09edad8372e07f0e7739e12cf356360c923e863c861f2d611",
    "logs": [
      {
        "transactionIndex": 147,
        "blockNumber": 22183929,
        "transactionHash": "0x4795a2f4eef48ea09edad8372e07f0e7739e12cf356360c923e863c861f2d611",
        "address": "0xbDd2aaC74c45AC669EB5248d1FbAcA5Ef6717cAE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ab0035b4d11c325a42582e779206ea9ef717c975"
        ],
        "data": "0x",
        "logIndex": 392,
        "blockHash": "0x5b9921762357bdf5b19bd19d9a2d94fe4d84311608a0af5e2e1c9aa417ceb140"
      }
    ],
    "blockNumber": 22183929,
    "cumulativeGasUsed": "30489205",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFb7cDF0Ee2De513ca49C19C963994B667E9Aa090",
    "0xaB0035b4d11c325A42582E779206eA9ef717c975"
  ],
  "numDeployments": 1,
  "solcInputHash": "d03c345e2fe0ffb756f818e76fce6290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizePool\",\"type\":\"address\"}],\"name\":\"setPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Yield.sol\":\"MockYieldContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Yield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MockYieldContract is Ownable {\\n    IERC20 public usdcToken;\\n    address public prizePool; // Address of the PrizePool contract\\n\\n    event YieldDeposited(address indexed user, uint256 amount);\\n    event YieldCollected(uint256 amount);\\n\\n    constructor(address _usdcToken, address _prizePool) Ownable(msg.sender) {\\n        usdcToken = IERC20(_usdcToken);\\n        prizePool = _prizePool; // Set the PrizePool address\\n    }\\n\\n    // Modifier to restrict access to the PrizePool contract\\n    modifier onlyPrizePool() {\\n        require(msg.sender == prizePool, \\\"Only PrizePool can collect yield\\\");\\n        _;\\n    }\\n\\n    // Function to allow users to deposit tokens as yield\\n    function depositYield(uint256 amount) external {\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        // Transfer tokens from the user to this contract\\n        usdcToken.transferFrom(msg.sender, address(this), amount);\\n\\n        emit YieldDeposited(msg.sender, amount);\\n    }\\n\\n    // Function to collect all available yield (restricted to PrizePool)\\n    function collectYield() external onlyPrizePool returns (uint256) {\\n        uint256 collectedYield = IERC20(usdcToken).balanceOf(address(this));\\n\\n        require(collectedYield > 0, \\\"No yield to collect\\\");\\n\\n        // Transfer the collected yield to the PrizePool\\n        usdcToken.transfer(prizePool, collectedYield);\\n\\n        emit YieldCollected(collectedYield);\\n\\n        return collectedYield;\\n    }\\n\\n    // Function to update the PrizePool address (only callable by the owner)\\n    function setPrizePool(address _prizePool) external onlyOwner {\\n        prizePool = _prizePool;\\n    }\\n}\\n\",\"keccak256\":\"0x7af95db4235aacd3d675bd143232ed93b78d86f4c93669e5ec11c1d4f673f98c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610eef380380610eef83398181016040528101906100329190610265565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c91906102b4565b60405180910390fd5b6100b48161013e60201b60201c565b5081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506102cf565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023282610207565b9050919050565b61024281610227565b811461024d57600080fd5b50565b60008151905061025f81610239565b92915050565b6000806040838503121561027c5761027b610202565b5b600061028a85828601610250565b925050602061029b85828601610250565b9150509250929050565b6102ae81610227565b82525050565b60006020820190506102c960008301846102a5565b92915050565b610c11806102de6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063719ce73e1161005b578063719ce73e146100ef5780637cf4c01b1461010d5780638da5cb5b14610129578063f2fde38b1461014757610088565b806311eac8551461008d578063336c6d39146100ab57806339aa77ea146100c7578063715018a6146100e5575b600080fd5b610095610163565b6040516100a2919061083d565b60405180910390f35b6100c560048036038101906100c0919061089b565b610189565b005b6100cf6101d5565b6040516100dc91906108e1565b60405180910390f35b6100ed61044b565b005b6100f761045f565b604051610104919061090b565b60405180910390f35b61012760048036038101906101229190610952565b610485565b005b6101316105bc565b60405161013e919061090b565b60405180910390f35b610161600480360381019061015c919061089b565b6105e5565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61019161066b565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109dc565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102c4919061090b565b602060405180830381865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610a11565b90506000811161034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190610a8a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016103c9929190610aaa565b6020604051808303816000875af11580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c9190610b0b565b507f99ce7ea7b0e3bfaf7e98b11cf56c05b758771107f1aaa50c6b6e626dc35ce8ad8160405161043c91906108e1565b60405180910390a18091505090565b61045361066b565b61045d60006106f2565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90610b84565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161052793929190610ba4565b6020604051808303816000875af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610b0b565b503373ffffffffffffffffffffffffffffffffffffffff167ff4349e7e347f0f29eadd49905d352751a7c97e545c924e7e399e4bb0570e4787826040516105b191906108e1565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105ed61066b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065f5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610656919061090b565b60405180910390fd5b610668816106f2565b50565b6106736107b6565b73ffffffffffffffffffffffffffffffffffffffff166106916105bc565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576106b46107b6565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016106e7919061090b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108036107fe6107f9846107be565b6107de565b6107be565b9050919050565b6000610815826107e8565b9050919050565b60006108278261080a565b9050919050565b6108378161081c565b82525050565b6000602082019050610852600083018461082e565b92915050565b600080fd5b6000610868826107be565b9050919050565b6108788161085d565b811461088357600080fd5b50565b6000813590506108958161086f565b92915050565b6000602082840312156108b1576108b0610858565b5b60006108bf84828501610886565b91505092915050565b6000819050919050565b6108db816108c8565b82525050565b60006020820190506108f660008301846108d2565b92915050565b6109058161085d565b82525050565b600060208201905061092060008301846108fc565b92915050565b61092f816108c8565b811461093a57600080fd5b50565b60008135905061094c81610926565b92915050565b60006020828403121561096857610967610858565b5b60006109768482850161093d565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79205072697a65506f6f6c2063616e20636f6c6c656374207969656c64600082015250565b60006109c660208361097f565b91506109d182610990565b602082019050919050565b600060208201905081810360008301526109f5816109b9565b9050919050565b600081519050610a0b81610926565b92915050565b600060208284031215610a2757610a26610858565b5b6000610a35848285016109fc565b91505092915050565b7f4e6f207969656c6420746f20636f6c6c65637400000000000000000000000000600082015250565b6000610a7460138361097f565b9150610a7f82610a3e565b602082019050919050565b60006020820190508181036000830152610aa381610a67565b9050919050565b6000604082019050610abf60008301856108fc565b610acc60208301846108d2565b9392505050565b60008115159050919050565b610ae881610ad3565b8114610af357600080fd5b50565b600081519050610b0581610adf565b92915050565b600060208284031215610b2157610b20610858565b5b6000610b2f84828501610af6565b91505092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000610b6e60208361097f565b9150610b7982610b38565b602082019050919050565b60006020820190508181036000830152610b9d81610b61565b9050919050565b6000606082019050610bb960008301866108fc565b610bc660208301856108fc565b610bd360408301846108d2565b94935050505056fea26469706673582212205a470a417907a2e3ede963559980389d98712612025a24fcd122e8784b0b592b64736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063719ce73e1161005b578063719ce73e146100ef5780637cf4c01b1461010d5780638da5cb5b14610129578063f2fde38b1461014757610088565b806311eac8551461008d578063336c6d39146100ab57806339aa77ea146100c7578063715018a6146100e5575b600080fd5b610095610163565b6040516100a2919061083d565b60405180910390f35b6100c560048036038101906100c0919061089b565b610189565b005b6100cf6101d5565b6040516100dc91906108e1565b60405180910390f35b6100ed61044b565b005b6100f761045f565b604051610104919061090b565b60405180910390f35b61012760048036038101906101229190610952565b610485565b005b6101316105bc565b60405161013e919061090b565b60405180910390f35b610161600480360381019061015c919061089b565b6105e5565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61019161066b565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109dc565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102c4919061090b565b602060405180830381865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610a11565b90506000811161034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190610a8a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016103c9929190610aaa565b6020604051808303816000875af11580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c9190610b0b565b507f99ce7ea7b0e3bfaf7e98b11cf56c05b758771107f1aaa50c6b6e626dc35ce8ad8160405161043c91906108e1565b60405180910390a18091505090565b61045361066b565b61045d60006106f2565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90610b84565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161052793929190610ba4565b6020604051808303816000875af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610b0b565b503373ffffffffffffffffffffffffffffffffffffffff167ff4349e7e347f0f29eadd49905d352751a7c97e545c924e7e399e4bb0570e4787826040516105b191906108e1565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105ed61066b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065f5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610656919061090b565b60405180910390fd5b610668816106f2565b50565b6106736107b6565b73ffffffffffffffffffffffffffffffffffffffff166106916105bc565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576106b46107b6565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016106e7919061090b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108036107fe6107f9846107be565b6107de565b6107be565b9050919050565b6000610815826107e8565b9050919050565b60006108278261080a565b9050919050565b6108378161081c565b82525050565b6000602082019050610852600083018461082e565b92915050565b600080fd5b6000610868826107be565b9050919050565b6108788161085d565b811461088357600080fd5b50565b6000813590506108958161086f565b92915050565b6000602082840312156108b1576108b0610858565b5b60006108bf84828501610886565b91505092915050565b6000819050919050565b6108db816108c8565b82525050565b60006020820190506108f660008301846108d2565b92915050565b6109058161085d565b82525050565b600060208201905061092060008301846108fc565b92915050565b61092f816108c8565b811461093a57600080fd5b50565b60008135905061094c81610926565b92915050565b60006020828403121561096857610967610858565b5b60006109768482850161093d565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79205072697a65506f6f6c2063616e20636f6c6c656374207969656c64600082015250565b60006109c660208361097f565b91506109d182610990565b602082019050919050565b600060208201905081810360008301526109f5816109b9565b9050919050565b600081519050610a0b81610926565b92915050565b600060208284031215610a2757610a26610858565b5b6000610a35848285016109fc565b91505092915050565b7f4e6f207969656c6420746f20636f6c6c65637400000000000000000000000000600082015250565b6000610a7460138361097f565b9150610a7f82610a3e565b602082019050919050565b60006020820190508181036000830152610aa381610a67565b9050919050565b6000604082019050610abf60008301856108fc565b610acc60208301846108d2565b9392505050565b60008115159050919050565b610ae881610ad3565b8114610af357600080fd5b50565b600081519050610b0581610adf565b92915050565b600060208284031215610b2157610b20610858565b5b6000610b2f84828501610af6565b91505092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000610b6e60208361097f565b9150610b7982610b38565b602082019050919050565b60006020820190508181036000830152610b9d81610b61565b9050919050565b6000606082019050610bb960008301866108fc565b610bc660208301856108fc565b610bd360408301846108d2565b94935050505056fea26469706673582212205a470a417907a2e3ede963559980389d98712612025a24fcd122e8784b0b592b64736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Yield.sol:MockYieldContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1751,
        "contract": "contracts/Yield.sol:MockYieldContract",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 1753,
        "contract": "contracts/Yield.sol:MockYieldContract",
        "label": "prizePool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}