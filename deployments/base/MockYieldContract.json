{
  "address": "0x00311eC5Ce90E0c40f9a6B8e0677D44b9B555Fd0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prizePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldDeposited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collectYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prizePool",
          "type": "address"
        }
      ],
      "name": "setPrizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c0d8a5e6b85a42ab8698909e094508848e698a90713b14fe1456a6d5dcd4bf1",
  "receipt": {
    "to": null,
    "from": "0xaB0035b4d11c325A42582E779206eA9ef717c975",
    "contractAddress": "0x00311eC5Ce90E0c40f9a6B8e0677D44b9B555Fd0",
    "transactionIndex": 85,
    "gasUsed": "848909",
    "logsBloom": "0x00001000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000100000000000100000400000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000010000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9b832b1b6581c44ce0c09c8c33085ea15b61534805a818db25be1655011d984b",
    "transactionHash": "0x2c0d8a5e6b85a42ab8698909e094508848e698a90713b14fe1456a6d5dcd4bf1",
    "logs": [
      {
        "transactionIndex": 85,
        "blockNumber": 22195805,
        "transactionHash": "0x2c0d8a5e6b85a42ab8698909e094508848e698a90713b14fe1456a6d5dcd4bf1",
        "address": "0x00311eC5Ce90E0c40f9a6B8e0677D44b9B555Fd0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ab0035b4d11c325a42582e779206ea9ef717c975"
        ],
        "data": "0x",
        "logIndex": 310,
        "blockHash": "0x9b832b1b6581c44ce0c09c8c33085ea15b61534805a818db25be1655011d984b"
      }
    ],
    "blockNumber": 22195805,
    "cumulativeGasUsed": "20315573",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Bd7C630978d7D6144E74346a78f03f5bbe04976",
    "0xaB0035b4d11c325A42582E779206eA9ef717c975"
  ],
  "numDeployments": 1,
  "solcInputHash": "42ff57b79c1eee9518e0860d44632bb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizePool\",\"type\":\"address\"}],\"name\":\"setPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockYieldContract.sol\":\"MockYieldContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/MockYieldContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MockYieldContract is Ownable {\\n    IERC20 public usdcToken;\\n    address public prizePool; // Address of the PrizePool contract\\n\\n    event YieldDeposited(address indexed user, uint256 amount);\\n    event YieldCollected(uint256 amount);\\n\\n    constructor(address _usdcToken, address _prizePool) Ownable() {\\n        usdcToken = IERC20(_usdcToken);\\n        prizePool = _prizePool; // Set the PrizePool address\\n    }\\n\\n    // Modifier to restrict access to the PrizePool contract\\n    modifier onlyPrizePool() {\\n        require(msg.sender == prizePool, \\\"Only PrizePool can collect yield\\\");\\n        _;\\n    }\\n\\n    // Function to allow users to deposit tokens as yield\\n    function depositYield(uint256 amount) external {\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        // Transfer tokens from the user to this contract\\n        usdcToken.transferFrom(msg.sender, address(this), amount);\\n\\n        emit YieldDeposited(msg.sender, amount);\\n    }\\n\\n    // Function to collect all available yield (restricted to PrizePool)\\n    function collectYield() external onlyPrizePool returns (uint256) {\\n        uint256 collectedYield = IERC20(usdcToken).balanceOf(address(this));\\n\\n        require(collectedYield > 0, \\\"No yield to collect\\\");\\n\\n        // Transfer the collected yield to the PrizePool\\n        usdcToken.transfer(prizePool, collectedYield);\\n\\n        emit YieldCollected(collectedYield);\\n\\n        return collectedYield;\\n    }\\n\\n    // Function to update the PrizePool address (only callable by the owner)\\n    function setPrizePool(address _prizePool) external onlyOwner {\\n        prizePool = _prizePool;\\n    }\\n}\\n\",\"keccak256\":\"0xd3a34ccc731b35ecca158f4b6cd32f5c579b2a94dd5d28cdfdb4c4c946a942a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f7238038062000f72833981810160405281019062000037919062000217565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200025e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001df82620001b2565b9050919050565b620001f181620001d2565b8114620001fd57600080fd5b50565b6000815190506200021181620001e6565b92915050565b60008060408385031215620002315762000230620001ad565b5b6000620002418582860162000200565b9250506020620002548582860162000200565b9150509250929050565b610d04806200026e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063719ce73e1161005b578063719ce73e146100ef5780637cf4c01b1461010d5780638da5cb5b14610129578063f2fde38b1461014757610088565b806311eac8551461008d578063336c6d39146100ab57806339aa77ea146100c7578063715018a6146100e5575b600080fd5b610095610163565b6040516100a29190610832565b60405180910390f35b6100c560048036038101906100c09190610890565b610189565b005b6100cf6101d5565b6040516100dc91906108d6565b60405180910390f35b6100ed61044b565b005b6100f761045f565b6040516101049190610900565b60405180910390f35b61012760048036038101906101229190610947565b610485565b005b6101316105bc565b60405161013e9190610900565b60405180910390f35b610161600480360381019061015c9190610890565b6105e5565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610191610669565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109d1565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102c49190610900565b602060405180830381865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610a06565b90506000811161034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190610a7f565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016103c9929190610a9f565b6020604051808303816000875af11580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c9190610b00565b507f99ce7ea7b0e3bfaf7e98b11cf56c05b758771107f1aaa50c6b6e626dc35ce8ad8160405161043c91906108d6565b60405180910390a18091505090565b610453610669565b61045d60006106e7565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90610b79565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161052793929190610b99565b6020604051808303816000875af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610b00565b503373ffffffffffffffffffffffffffffffffffffffff167ff4349e7e347f0f29eadd49905d352751a7c97e545c924e7e399e4bb0570e4787826040516105b191906108d6565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105ed610669565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490610c42565b60405180910390fd5b610666816106e7565b50565b6106716107ab565b73ffffffffffffffffffffffffffffffffffffffff1661068f6105bc565b73ffffffffffffffffffffffffffffffffffffffff16146106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90610cae565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107f86107f36107ee846107b3565b6107d3565b6107b3565b9050919050565b600061080a826107dd565b9050919050565b600061081c826107ff565b9050919050565b61082c81610811565b82525050565b60006020820190506108476000830184610823565b92915050565b600080fd5b600061085d826107b3565b9050919050565b61086d81610852565b811461087857600080fd5b50565b60008135905061088a81610864565b92915050565b6000602082840312156108a6576108a561084d565b5b60006108b48482850161087b565b91505092915050565b6000819050919050565b6108d0816108bd565b82525050565b60006020820190506108eb60008301846108c7565b92915050565b6108fa81610852565b82525050565b600060208201905061091560008301846108f1565b92915050565b610924816108bd565b811461092f57600080fd5b50565b6000813590506109418161091b565b92915050565b60006020828403121561095d5761095c61084d565b5b600061096b84828501610932565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79205072697a65506f6f6c2063616e20636f6c6c656374207969656c64600082015250565b60006109bb602083610974565b91506109c682610985565b602082019050919050565b600060208201905081810360008301526109ea816109ae565b9050919050565b600081519050610a008161091b565b92915050565b600060208284031215610a1c57610a1b61084d565b5b6000610a2a848285016109f1565b91505092915050565b7f4e6f207969656c6420746f20636f6c6c65637400000000000000000000000000600082015250565b6000610a69601383610974565b9150610a7482610a33565b602082019050919050565b60006020820190508181036000830152610a9881610a5c565b9050919050565b6000604082019050610ab460008301856108f1565b610ac160208301846108c7565b9392505050565b60008115159050919050565b610add81610ac8565b8114610ae857600080fd5b50565b600081519050610afa81610ad4565b92915050565b600060208284031215610b1657610b1561084d565b5b6000610b2484828501610aeb565b91505092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000610b63602083610974565b9150610b6e82610b2d565b602082019050919050565b60006020820190508181036000830152610b9281610b56565b9050919050565b6000606082019050610bae60008301866108f1565b610bbb60208301856108f1565b610bc860408301846108c7565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c2c602683610974565b9150610c3782610bd0565b604082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c98602083610974565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b905091905056fea26469706673582212200164f61ff145eee5a7529a5c982603238972bea7c98e9d3ed3b188fb1ae0aedf64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063719ce73e1161005b578063719ce73e146100ef5780637cf4c01b1461010d5780638da5cb5b14610129578063f2fde38b1461014757610088565b806311eac8551461008d578063336c6d39146100ab57806339aa77ea146100c7578063715018a6146100e5575b600080fd5b610095610163565b6040516100a29190610832565b60405180910390f35b6100c560048036038101906100c09190610890565b610189565b005b6100cf6101d5565b6040516100dc91906108d6565b60405180910390f35b6100ed61044b565b005b6100f761045f565b6040516101049190610900565b60405180910390f35b61012760048036038101906101229190610947565b610485565b005b6101316105bc565b60405161013e9190610900565b60405180910390f35b610161600480360381019061015c9190610890565b6105e5565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610191610669565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109d1565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102c49190610900565b602060405180830381865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610a06565b90506000811161034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190610a7f565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016103c9929190610a9f565b6020604051808303816000875af11580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c9190610b00565b507f99ce7ea7b0e3bfaf7e98b11cf56c05b758771107f1aaa50c6b6e626dc35ce8ad8160405161043c91906108d6565b60405180910390a18091505090565b610453610669565b61045d60006106e7565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90610b79565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161052793929190610b99565b6020604051808303816000875af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610b00565b503373ffffffffffffffffffffffffffffffffffffffff167ff4349e7e347f0f29eadd49905d352751a7c97e545c924e7e399e4bb0570e4787826040516105b191906108d6565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105ed610669565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490610c42565b60405180910390fd5b610666816106e7565b50565b6106716107ab565b73ffffffffffffffffffffffffffffffffffffffff1661068f6105bc565b73ffffffffffffffffffffffffffffffffffffffff16146106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90610cae565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107f86107f36107ee846107b3565b6107d3565b6107b3565b9050919050565b600061080a826107dd565b9050919050565b600061081c826107ff565b9050919050565b61082c81610811565b82525050565b60006020820190506108476000830184610823565b92915050565b600080fd5b600061085d826107b3565b9050919050565b61086d81610852565b811461087857600080fd5b50565b60008135905061088a81610864565b92915050565b6000602082840312156108a6576108a561084d565b5b60006108b48482850161087b565b91505092915050565b6000819050919050565b6108d0816108bd565b82525050565b60006020820190506108eb60008301846108c7565b92915050565b6108fa81610852565b82525050565b600060208201905061091560008301846108f1565b92915050565b610924816108bd565b811461092f57600080fd5b50565b6000813590506109418161091b565b92915050565b60006020828403121561095d5761095c61084d565b5b600061096b84828501610932565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79205072697a65506f6f6c2063616e20636f6c6c656374207969656c64600082015250565b60006109bb602083610974565b91506109c682610985565b602082019050919050565b600060208201905081810360008301526109ea816109ae565b9050919050565b600081519050610a008161091b565b92915050565b600060208284031215610a1c57610a1b61084d565b5b6000610a2a848285016109f1565b91505092915050565b7f4e6f207969656c6420746f20636f6c6c65637400000000000000000000000000600082015250565b6000610a69601383610974565b9150610a7482610a33565b602082019050919050565b60006020820190508181036000830152610a9881610a5c565b9050919050565b6000604082019050610ab460008301856108f1565b610ac160208301846108c7565b9392505050565b60008115159050919050565b610add81610ac8565b8114610ae857600080fd5b50565b600081519050610afa81610ad4565b92915050565b600060208284031215610b1657610b1561084d565b5b6000610b2484828501610aeb565b91505092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000610b63602083610974565b9150610b6e82610b2d565b602082019050919050565b60006020820190508181036000830152610b9281610b56565b9050919050565b6000606082019050610bae60008301866108f1565b610bbb60208301856108f1565b610bc860408301846108c7565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c2c602683610974565b9150610c3782610bd0565b604082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c98602083610974565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b905091905056fea26469706673582212200164f61ff145eee5a7529a5c982603238972bea7c98e9d3ed3b188fb1ae0aedf64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MockYieldContract.sol:MockYieldContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 229,
        "contract": "contracts/MockYieldContract.sol:MockYieldContract",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 231,
        "contract": "contracts/MockYieldContract.sol:MockYieldContract",
        "label": "prizePool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}